<?php

namespace SE\AuctionBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends \Doctrine\ORM\EntityRepository
{
    public function getMessageByAdvert($advertId, $recieveId,  $page, $nbPerPage)
    {
         $qb = $this->createQueryBuilder('message')
            ->leftJoin('message.advert', 'advert')
            ->addSelect('advert')
            ->leftJoin('message.sender', 'sender')
            ->addSelect('sender')
            ->leftJoin('message.receiver', 'receiver')
            ->addSelect('receiver')
            ->add('groupBy', 'sender.id');
                
        $qb->where($qb->expr()->eq('advert.id', $advertId))
            ->andWhere($qb->expr()->neq('sender.id', $recieveId))
            ->andWhere($qb->expr()->eq('message.isPublished', 1))
            ->andWhere($qb->expr()->eq('message.isDeleted', 0));
        
        $qb->addOrderBy('message.dateCreation', 'DESC')->getQuery();
        
         // On définit l'demande à partir de laquelle commencer la liste
            $qb->setFirstResult(($page-1) * $nbPerPage)
            // Ainsi que le nombre d'demande à afficher sur une page
            ->setMaxResults($nbPerPage);

        // Enfin, on retourne l'objet Paginator correspondant à la requête construite
        // (n'oubliez pas le use correspondant en début de fichier)
        return new Paginator($qb, true); 
    }
    
    public function getMessageConversation($userId, $page, $nbPerPage){
        
         $qb = $this->createQueryBuilder('m')
            ->leftJoin('m.receiver', 'r')
            ->addSelect('r')
            ->leftJoin('m.sender', 's')
            ->addSelect('s')
            ->add('groupBy', 's.id');
                
        $qb->where($qb->expr()->eq('r.id', $userId))
            ->andWhere($qb->expr()->eq('m.isPublished', 1))
            ->andWhere($qb->expr()->eq('m.isDeleted', 0))
            ->getQuery();
            
            // On définit l'demande à partir de laquelle commencer la liste
            $qb->setFirstResult(($page-1) * $nbPerPage)
            // Ainsi que le nombre d'demande à afficher sur une page
            ->setMaxResults($nbPerPage);

        // Enfin, on retourne l'objet Paginator correspondant à la requête construite
        // (n'oubliez pas le use correspondant en début de fichier)
        return new Paginator($qb, true);
    }

    public function getMessageSender($userId, $page, $nbPerPage)
    {
         $qb = $this->createQueryBuilder('m')
            ->leftJoin('m.receiver', 'r')
            ->addSelect('r')
            ->leftJoin('m.sender', 's')
            ->addSelect('s')
            ->add('groupBy', 's.id');
                
        $qb->where($qb->expr()->eq('r.id', $userId))
            ->andWhere($qb->expr()->eq('m.isPublished', 1))
            ->andWhere($qb->expr()->eq('m.isDeleted', 0))        
            ->getQuery();
        
            // On définit l'demande à partir de laquelle commencer la liste
            $qb->setFirstResult(($page-1) * $nbPerPage)
            // Ainsi que le nombre d'demande à afficher sur une page
            ->setMaxResults($nbPerPage);

        // Enfin, on retourne l'objet Paginator correspondant à la requête construite
        // (n'oubliez pas le use correspondant en début de fichier)
        return new Paginator($qb, true);
    }
    
     public function getMessageReceive($userId, $page, $nbPerPage)
    {
        $qb = $this->createQueryBuilder('m')
            ->leftJoin('m.sender', 's')
            ->addSelect('s')
            ->leftJoin('m.receiver', 'r')
            ->addSelect('r')
            ->add('groupBy', 'r.id');
                
        $qb->where($qb->expr()->eq('s.id', $userId))
            ->andWhere($qb->expr()->eq('m.isPublished', 1))
            ->andWhere($qb->expr()->eq('m.isDeleted', 0))
            ->getQuery();
        
            // On définit l'demande à partir de laquelle commencer la liste
            $qb->setFirstResult(($page-1) * $nbPerPage)
            // Ainsi que le nombre d'demande à afficher sur une page
            ->setMaxResults($nbPerPage);

        // Enfin, on retourne l'objet Paginator correspondant à la requête construite
        // (n'oubliez pas le use correspondant en début de fichier)
        return new Paginator($qb, true);
    }
    
    public function getCountMessage($advertId)
    {
        $qb = $this->createQueryBuilder('message');
        
         $qb->leftJoin('message.advert', 'advert')
            ->addSelect('advert');
         
        $qb->where($qb->expr()->eq('advert.id', $advertId))
            ->andWhere($qb->expr()->eq('advert.isDeleted', 0))
            ->andWhere($qb->expr()->eq('advert.isEnabled', 1));
        
        $qb->getQuery();
        
        return $qb
            ->getQuery()
            ->getResult(); 
    }
    
    public function getConversation($advertId, $userSenderId, $userReceiverId)
    {
        $qb = $this->createQueryBuilder('message');
        
        $qb = $this->createQueryBuilder('message')
           ->leftJoin('message.advert', 'advert')
           ->addSelect('advert')
                
           ->leftJoin('message.sender', 'sender')
           ->addSelect('sender')
           ->leftJoin('message.receiver', 'receiver')
           ->addSelect('receiver')
           ->andWhere($qb->expr()->eq('message.isDeleted', 0));
           
                
        $qb->andWhere($qb->expr()->eq('sender.id', $userSenderId));
        $qb->orWhere($qb->expr()->eq('receiver.id', $userSenderId));
            
        $qb->andWhere($qb->expr()->eq('receiver.id', $userReceiverId));
        $qb->orWhere($qb->expr()->eq('sender.id', $userReceiverId));
            
         $qb->andWhere($qb->expr()->eq('advert.id', $advertId));
        
        $qb->orderBy('message.dateCreation', 'DESC')->getQuery();
        
        return $qb
            ->getQuery()
            ->getResult(); 
    }
}
