<?php

namespace SE\AuctionBundle\Repository;

/**
 * AuctionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

use Doctrine\ORM\Tools\Pagination\Paginator;

class AuctionRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAuctionAdvert($page, $nbPerPage){
        
        $qb = $this->createQueryBuilder('au');
        
         $qb
            ->leftJoin('au.advert', 'ad')
            ->addSelect('ad')
            ->leftJoin('ad.category', 'cat')
            ->addSelect('cat');
            
                
        $qb->orderBy('ad.dateCreation', 'DESC');

        $qb->where($qb->expr()->eq('ad.isPublished', 1))
                ->andWhere($qb->expr()->eq('ad.isDeleted', 0))
                ->andWhere($qb->expr()->eq('ad.isEnabled', 1))
                ->getQuery();
        
            // On définit l'demande à partir de laquelle commencer la liste
        $qb->setFirstResult(($page-1) * $nbPerPage)
            // Ainsi que le nombre d'demande à afficher sur une page
            ->setMaxResults($nbPerPage);

        // Enfin, on retourne l'objet Paginator correspondant à la requête construite
        // (n'oubliez pas le use correspondant en début de fichier)
        return new Paginator($qb, true);
    }
    
    
    public function getLastAuction($advertId){
         $qb = $this->createQueryBuilder('au');
        
         $qb
            ->leftJoin('au.advert', 'ad')
            ->addSelect('ad');
         
        $qb->where($qb->expr()->eq('ad.id', $advertId));
            
        $qb->orderBy('au.dateCreation', 'DESC');

        
                
        $qb->setMaxResults(1);
        $qb->getQuery();
        
        return $qb
            ->getQuery()
            ->getResult(); 
    }
}
