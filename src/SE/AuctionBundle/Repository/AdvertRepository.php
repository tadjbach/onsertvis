<?php

namespace SE\AuctionBundle\Repository;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
use Doctrine\ORM\Tools\Pagination\Paginator;

class AdvertRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAdverts($page, $nbPerPage)
    {
        $query = $this->createQueryBuilder('a')
            ->leftJoin('a.image', 'i')
            ->addSelect('i')
            ->leftJoin('a.category', 'c')
            ->addSelect('c')
            ->orderBy('a.dateCreation', 'DESC');

        $query->where($query->expr()->eq('a.isPublished', 1));

        $query
            ->getQuery()
            // On définit l'annonce à partir de laquelle commencer la liste
            ->setFirstResult(($page-1) * $nbPerPage)
            // Ainsi que le nombre d'annonce à afficher sur une page
            ->setMaxResults($nbPerPage);

        // Enfin, on retourne l'objet Paginator correspondant à la requête construite
        // (n'oubliez pas le use correspondant en début de fichier)
        return new Paginator($query, true);
    }
    public function getAdvertWithCategory($catgeory, $limit)
    {
        $qb=$this->createQueryBuilder('a');

        $qb
            ->innerJoin('a.category', 'c')
            ->addSelect('c');

        $qb->where($qb->expr()->eq('c.slug', "'".$catgeory."'"));

        $qb->setMaxResults($limit);

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function getCountAdvertByCategory($catgeoryId)
    {
        $qb=$this->createQueryBuilder('a');

        $qb
            ->innerJoin('a.category', 'c')
            ->addSelect('c');

        $qb->where($qb->expr()->eq('c.id', $catgeoryId));

        return $qb
            ->getQuery()
            ->getScalarResult();
    }

}
