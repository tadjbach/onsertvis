<?php

namespace SE\PlatformBundle\Repository;

/**
 * PostalCodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostalCodeRepository extends \Doctrine\ORM\EntityRepository
{
     private function slugify($text)
        {
          // replace non letter or digits by -
          $text = preg_replace('~[^\pL\d]+~u', '-', $text);

          // transliterate
          $text = iconv('utf-8', 'us-ascii//TRANSLIT', $text);

          // remove unwanted characters
          $text = preg_replace('~[^-\w]+~', '', $text);

          // trim
          $text = trim($text, '-');

          // remove duplicate -
          $text = preg_replace('~-+~', '-', $text);

          // lowercase
          $text = strtolower($text);

          if (empty($text)) {
            return 'n-a';
          }

          return $text;
        }

     public function getpostalCodeByCityAndDepartement($city, $departement){
         $qb=$this->createQueryBuilder('postalCode');

        $qb
            ->innerJoin('postalCode.city', 'city')
            ->addSelect('city')
            ->innerJoin('city.departement', 'departement')
            ->addSelect('departement');

        if($city !== NULL && $city !== ' ')
        {
            $city = $this->slugify($city);
            $qb->where("city.slug LIKE '$city'")
                ->andWhere($qb->expr()->eq('departement.id', $departement));
        }

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function getPostalCode($cp)
    {
        $qb=$this->createQueryBuilder('postalCode')
                ->innerJoin('postalCode.city', 'city')
                ->addSelect('city');

        $qb->where("postalCode.value LIKE '$cp%'");

        $cp = $this->slugify($cp);
            $qb->orWhere("city.slug LIKE '$cp%'");

        $qb->setMaxResults(10000);

        return $qb->getQuery()
            ->getResult();
    }

    public function getPostalCodeByValue($postalCode)
    {
        $qb=$this->createQueryBuilder('postalCode')
        ->innerJoin('postalCode.city', 'city')
        ->addSelect('city');

        $pc = substr($postalCode, 0, 5);
        $city = substr($postalCode, 5, 500);
        $city = $this->slugify($city);

        $qb->where("postalCode.value LIKE '$pc'")
        ->andWhere("city.slug LIKE '$city'");

        $qb->setMaxResults(1);

        return $qb->getQuery()
            ->getResult();
    }

}
